version: '3.8'

services:
  postgres-finance:
    image: postgres:15-alpine
    container_name: postgres-finance
    environment:
      POSTGRES_DB: finance
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_finance_data:/var/lib/postgresql/data
    networks:
      - microservices-network

  postgres-sms:
    image: postgres:15-alpine
    container_name: postgres-sms
    environment:
      POSTGRES_DB: sms
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"
    volumes:
      - postgres_sms_data:/var/lib/postgresql/data
    networks:
      - microservices-network

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - microservices-network

  finance-api:
    build:
      context: ./finance
      dockerfile: build/Dockerfile
    container_name: finance-api
    command: ["./finance-api"]
    ports:
      - "8080:8080"
    depends_on:
      postgres-finance:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices-network

  finance-consumer:
    build:
      context: ./finance
      dockerfile: build/Dockerfile
    container_name: finance-consumer
    command: ["./finance-consumer"]
    depends_on:
      postgres-finance:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices-network

  sms-api:
    build:
      context: ./sms
      dockerfile: build/Dockerfile
    container_name: sms-api
    command: ["./sms-api"]
    ports:
      - "8081:8080"
    depends_on:
      postgres-sms:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices-network

  sms-consumer:
    build:
      context: ./sms
      dockerfile: build/Dockerfile
    container_name: sms-consumer
    command: ["./sms-consumer"]
    depends_on:
      postgres-sms:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - microservices-network

volumes:
  postgres_finance_data:
  postgres_sms_data:
  rabbitmq_data:

networks:
  microservices-network:
    driver: bridge
